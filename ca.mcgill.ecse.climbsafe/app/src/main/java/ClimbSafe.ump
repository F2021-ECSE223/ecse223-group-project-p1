namespace ca.mcgill.ecse.climbsafe.model;

use ClimbSafePersistence.ump;

class ClimbSafe {
  Date startDate;
  Integer nrWeeks;
  Integer priceOfGuidePerWeek;
  1 <@>- 0..1 Administrator administrator;
  1 <@>- * Guide guides;
  1 <@>- * Member members;
  1 <@>- * BookedItem bookedItems;
  1 <@>- * Equipment equipment;
  1 <@>- * EquipmentBundle bundles;
  1 <@>- * BundleItem bundleItems;
  1 <@>- * Hotel hotels;
  1 <@>- * Assignment assignments;
}

class User {
  abstract;
  unique email;
  password;
}

class Administrator {
  isA User;
}

class NamedUser {
  abstract;
  isA User;
  name;
  emergencyContact;
}

class Guide {
  isA NamedUser;
}

class Member {
  isA NamedUser;
  Integer nrWeeks;
  Boolean guideRequired;
  Boolean hotelRequired;
}

associationClass BookedItem {
  Integer quantity;
  * Member member;
  * BookableItem item;
}

class BookableItem {
  abstract;
  unique name;
}

class Equipment {
  isA BookableItem;
  Integer weight;
  Integer pricePerWeek;
}

class EquipmentBundle {
  isA BookableItem;
  Integer discount;
}

associationClass BundleItem {
  Integer quantity;
  * EquipmentBundle bundle;
  * Equipment equipment;
}

class Hotel {
  unique name;
  address;
  enum HotelRating { OneStar, TwoStars, ThreeStars, FourStars, FiveStars }
  HotelRating rating;
} 

class Assignment {
  Integer startWeek;
  Integer endWeek;
  0..1 -- 1 Member member;
  * -- 0..1 Guide guide;
  * -- 0..1 Hotel hotel;
  
  public int getTotalCostForGuide(){
	 int totalCostForGuide = 0;
	 
	 // If no guide, then total cost = 0
	 if(this.hasGuide()){
	 
		 int nbrWeek = this.getMember().getNrWeeks();
		 	
		 	// Compute total cost
		  	totalCostForGuide += this.getClimbSafe().getPriceOfGuidePerWeek()*nbrWeek;
		 
	 }
	  return totalCostForGuide;
  }
  
  public int getTotalCostForEquipment(){
  	 double totalCostForEquipment = 0;
	 int nbrWeek = this.getMember().getNrWeeks();
	 if(this.getMember().hasBookedItems()){
	 	
	 	
	 	// Iterating over the booked items of the member
	 	for(BookedItem bookedItem: this.getMember().getBookedItems()){
	 	int quantity = bookedItem.getQuantity();
	 	
	  	if(bookedItem.getItem() instanceof EquipmentBundle){
	  	
	  		
	  				// Then we get the bundle
	  				EquipmentBundle bundle = ((EquipmentBundle) bookedItem.getItem());
	  				
	  				
					// And we iterate over the items of equipment bundle
					for(BundleItem item: bundle.getBundleItems()){
					
						// We check if a guide is hired
						if(this.getMember().isGuideRequired()){
							
						
							// If so, the discount is applied on the equipments
							totalCostForEquipment += item.getQuantity() * quantity*
								item.getEquipment().getPricePerWeek() * ( (100-bundle.getDiscount()) /100.0 ) * nbrWeek;
						}else{
						
							// If not, the equipments are rented at regular price
							
							totalCostForEquipment += item.getQuantity() * 
								item.getEquipment().getPricePerWeek() * quantity* nbrWeek;
						}
					
					}
	  		// If the current item is an equipment not in a bundle
	   	}else if(bookedItem.getItem() instanceof Equipment){
	 		
	 			// Then the cost is the equipment's price per week times the number of weeks
	  			totalCostForEquipment += ((Equipment) bookedItem.getItem()).getPricePerWeek()* quantity* nbrWeek;
	  			
	  		
	  	}
	  		
	  		
	  	}
	 }
	 return ((int) totalCostForEquipment);
  
  }
}
